[
  {
    "href": "index.html",
    "title": "RStudio Desktop Administration ?var:buildType ?var:version",
    "section": "",
    "text": "RStudio Desktop provides the RStudio IDE as a native desktop application for Windows, Mac, and Linux.\nThis manual describes RStudio Desktop Professional Edition which adds the following enhancements to the open-source version of RStudio Desktop:\n\nA commercial license for organizations not able to use AGPL software\nAccess to priority RStudio support\nAbility to connect to remote sessions running on an RStudio Server Pro server\nTools for license activation and management\nRStudio Professional Database Drivers for connecting to many of the most popular databases\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n  var isInternal = new RegExp('/' + window.location.host + '/');\n  // Inspect non-navigation links and adorn them if external\n  var links = window.document.querySelectorAll('a:not(.nav-link):not(.toc-action)');\n  for (var i=0; i<links.length; i++) {\n    const link = links[i];\n    if (!isInternal.test(link.href)) {\n        // target, if specified\n        link.setAttribute(\"target\", \"_blank\");\n        // default icon\n        link.classList.add(\"external\");\n    }\n  }\n});"
  },
  {
    "href": "getting_started/prerequisites.html#prerequisites",
    "title": "Prerequisites",
    "section": "Prerequisites",
    "text": "RStudio Desktop requires a previous installation of R version 3.0.1 or higher. If you don’t already have R, download it from https://cran.rstudio.com/. A 64-bit version of R is required on macOS and Linux; RStudio Desktop Pro for Microsoft Windows supports both 32-bit and 64-bit R sessions."
  },
  {
    "href": "getting_started/installation.html#installation",
    "title": "Installation",
    "section": "Installation",
    "text": "Microsoft Windows\nRStudio Pro for Windows requires a 64-bit edition of Microsoft Windows 10 or newer.\n\nInstaller\nDownload the self-extracting installer (.exe) and execute it. Follow the prompts in the setup wizard. Administrator access is required to complete the installation. The installer will create a shortcut for RStudio and an Add/Remove Programs entry for uninstall.\n\n\n\nZipfile Option\nA zip file may be downloaded instead of the self-extracting installer. Download and extract the .zip to any location. RStudio may then be run directly from that location via rstudio.exe (in the bin folder).\n\n\n\nMac\nRStudio for Mac requires macOS 10.13 (High Sierra) or newer. Download the disk image (.dmg) and open it. Drag the RStudio icon to Applications then eject the disk image once complete. To uninstall, move RStudio from where it was installed to the trash.\n\n\n\nLinux\nRStudio produces binary packages targeting the following 64-bit Linux desktop distros. Download the appropriate package and install using system tools.\n\n\n\n\n\n\n\nLinux Distro\nRStudio package format\n\n\n\n\nUbuntu 18.04 LTS Ubuntu 20.04 LTS\ndeb\n\n\nDebian 9 Debian 10\ndeb\n\n\nRHEL/CentOS 7\nrpm\n\n\nRHEL/CentOS 8\nrpm\n\n\nSLES 12\nrpm\n\n\nOpenSUSE/SLES 15\nrpm\n\n\n\nLinux desktop users may need to import RStudio’s public code-signing key prior to installation, depending on the operating system’s security policy."
  },
  {
    "href": "getting_started/activation.html#activation",
    "title": "Activation",
    "section": "Activation",
    "text": "When a user first starts RStudio it will activate an initial evaluation period during which the product is fully usable. After the evaluation period expires, the product will need to be activated with a license to continue using it.\n\nViewing License Status\nUse Help/Manage License menu to display the Manage RStudio License dialog and view the amount of time remaining in the evaluation.\n\nThe license status can also be viewed from the About dialog.\n\n\n\nLicense Activation\nAfter purchasing a license you will receive a license file (.lic). Use the Manage License dialog and use “Select license file…” and follow the instructions.\nAdditional details on license management can be found in the [License Management] section."
  },
  {
    "href": "license_management/license_management.html#license-management",
    "title": "Overview",
    "section": "License Management",
    "text": ""
  },
  {
    "href": "license_management/product_activation.html#product-activation",
    "title": "Product Activation",
    "section": "Product Activation",
    "text": "An RStudio Desktop Pro license is delivered as a License File (.lic).\n\nActivation Basics\nAs the evaluation period or a previously installed license nears expiration, a warning bar will appear at the bottom of RStudio.\n\nWhen a license expires, the warning bar will indicate that the license has expired. If the license expires entirely while RStudio is being used, an error is displayed, after which RStudio will close.\n\nDo not let users continue using the product right up to the end of this grace period, as it could result in lost work.\nPurchase a license to continue using the product. The license is delivered as a license file (.lic) or a license key. We recommend activating RStudio Desktop Pro using the license file to take full advantage of your purchased RStudio Desktop license terms.\nIt is not necessary to wait until the evaluation period has expired to install a license.\n\n\n\nLicense File Activation\nOnce you receive a license file (.lic) from RStudio, click Select license file… in the Manage RStudio License dialog, and browse to the file.\nOnce the file is imported and validated, RStudio Desktop Pro will be ready for use. The Manage RStudio License dialog will now show details on the installed license, and buttons for updating or removing the license.\nSelect new license file… will replace the existing license with that from a new license file.\nRemove license… will delete the current license, and a new license will need to be installed to continue using the product (if the evaluation period has also expired).\n\nNote that activating with a license file is preferred. However, you can instead activate with a license key. To do so, click Activate with license key… in the Manage RStudio License dialog. Paste the key into the field and press Activate."
  },
  {
    "href": "license_management/evaluations.html#evaluations",
    "title": "Evaluations",
    "section": "Evaluations",
    "text": "Beginning Evaluations\nIn most configurations an evaluation starts automatically when RStudio is run for the first time by a given user account on a given computer.\n\n\n\n\n\n\n\n\nComputer Type\nInternet?\nEvaluation\n\n\n\n\nPhysical\nYes\nAutomatic\n\n\nPhysical\nNo\nAutomatic\n\n\nVirtual\nYes\nAutomatic\n\n\nVirtual\nNo\nManual (requires license file-based trial)\n\n\n\nFor the final case, a virtual machine without internet access, contact RStudio to obtain a license file to enable a trial period.\n\n\nExtending Evaluations\nIf you are unable to evaluate RStudio Desktop Pro during the initial evaluation period, you can request an extension from RStudio support (support@rstudio.com), and it will be provided via a short term license file which is installed in the same fashion as a regular license file."
  },
  {
    "href": "license_management/command_line_operations.html#command-line-operations",
    "title": "Command Line Operations",
    "section": "Command Line Operations",
    "text": "All licensing operations available in the RStudio user interface may also be performed from the command-line using the license-manager executable. This is rarely necessary, except in some cases outlined earlier in this document, or if instructed by a customer support representative.\n\n\n\n\n\n\n\nOS\nDefault Location\n\n\n\n\nWindows\nC:\\Program Files\\RStudio\\bin\\license-manager.exe\n\n\nmacOS\n/Applications/RStudio.app/Contents/MacOS/license-manager\n\n\nLinux\n/usr/lib/rstudio/bin/license-manager"
  },
  {
    "href": "database_drivers/database_drivers.html#rstudio-professional-database-drivers",
    "title": "Overview",
    "section": "RStudio Professional Database Drivers",
    "text": ""
  },
  {
    "href": "database_drivers/install_database_drivers.html",
    "title": "Install Database Drivers",
    "section": "",
    "text": "RStudio Professional Database Drivers\nThe RStudio Pro Database Drivers are installed on-demand by the RStudio IDE. Doing so requires internet connectivity.\nTo test this, start RStudio and invoke the New Connection dialog from the Connections pane.\n\nThe New Connection dialog shows the available database drivers.\n\nSelect one, such as MySQL. RStudio first offers to install or update the necessary packages for database connectivity (unless previously installed). These packages apply to all database drivers, so this step will only happen once.\n\nProceed, and the packages will download and install.\n\nOnce packages are installed, the prompt for installation of the database driver itself will appear.\n\nOn Windows, each driver needs to make changes to the registry, and will require administrator access.\n\n\nFinally, the database connection can be configured by the user. On subsequent attempts to create a connection with this driver, RStudio will go straight to this screen.\n\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n  var isInternal = new RegExp('/' + window.location.host + '/');\n  // Inspect non-navigation links and adorn them if external\n  var links = window.document.querySelectorAll('a:not(.nav-link):not(.toc-action)');\n  for (var i=0; i<links.length; i++) {\n    const link = links[i];\n    if (!isInternal.test(link.href)) {\n        // target, if specified\n        link.setAttribute(\"target\", \"_blank\");\n        // default icon\n        link.classList.add(\"external\");\n    }\n  }\n});"
  },
  {
    "href": "settings/settings.html",
    "title": "Overview",
    "section": "",
    "text": "Settings\nAll of the settings file locations described in this section conform to the XDG Base Directory Specification. They are configurable using environment variables:\n\n\n\n\n\n\n\n\n\n\nScope\nOS\nDefault\nXDG Base Variable\nRStudio Variable\n\n\n\n\nUser\nWindows\n%APPDATA%\\RStudio\nXDG_CONFIG_HOME\nRSTUDIO_CONFIG_HOME\n\n\nSystem\nWindows\n%PROGRAMDATA%\\RStudio\nXDG_CONFIG_DIRS\nRSTUDIO_CONFIG_DIR\n\n\nUser\nUnix\n~/.config/rstudio\nXDG_CONFIG_HOME\nRSTUDIO_CONFIG_HOME\n\n\nSystem\nUnix\n/etc/rstudio\nXDG_CONFIG_DIRS\nRSTUDIO_CONFIG_DIR\n\n\n\nHere, and in the rest of this section, “Unix” refers to both Linux and macOS.\nIn accordance with the Base Directory Specification, the XDG environment variables specify the location of the rstudio folder. For example, to store system-wide preference configuration in /var/config/rstudio/rstudio-prefs.json, you would set the XDG_CONFIG_DIRS variable to the value /var/config.\nIf specified, the RStudio variables take precedence over the XDG variables. These variables specify a specific directory (not a base directory). For example, to store system-wide preferences in /var/config/settings/rstudio-prefs.json, you would set the RSTUDIO_CONFIG_DIR variable to the value /var/config/settings.\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n  var isInternal = new RegExp('/' + window.location.host + '/');\n  // Inspect non-navigation links and adorn them if external\n  var links = window.document.querySelectorAll('a:not(.nav-link):not(.toc-action)');\n  for (var i=0; i<links.length; i++) {\n    const link = links[i];\n    if (!isInternal.test(link.href)) {\n        // target, if specified\n        link.setAttribute(\"target\", \"_blank\");\n        // default icon\n        link.classList.add(\"external\");\n    }\n  }\n});"
  },
  {
    "href": "settings/preferences.html#preferences",
    "title": "Preferences",
    "section": "Preferences",
    "text": "User preferences set in the RStudio IDE’s Global Options dialog can also be set in the JSON file rstudio-prefs.json, located in the settings directory described above.\n\nExample\nBy default, RStudio Server asks to save the workspace after the R session ends, and it always loads the workspace when starting a new session. Some organizations prefer to disable this behavior in order to discourage users from accumulating too much ad-hoc state. To do so, set the following:\n%PROGRAMDATA%-prefs.json\n{\n    \"save_workspace\": \"never\",\n    \"load_workspace\": false\n}\n\n\nReference\nA full list of preferences and their possible values can be found in the RStudio Workbench Administration Guide. Ensure that you reference the version of the guide that matches your version of RStudio Desktop Pro, as options can change between versions."
  },
  {
    "href": "settings/other_settings.html#other-settings",
    "title": "Other Settings",
    "section": "Other Settings",
    "text": "The ~/.config/rstudio//etc/rstudio/ folders (or Windows equivalent as described above) contains several subfolders which can be used to install per-user content and/or system-wide defaults.\n\n\n\n\n\n\n\nFolder\nContents\n\n\n\n\nthemes\n.rstheme files defining additional editor color schemes\n\n\nkeybindings\n.json files defining custom keybindings\n\n\nsnippets\n.snippets files defining editor snippets\n\n\ntemplates\nDefault template content for new files created in RStudio\n\n\ndictionaries\nAdditional dictionaries and languages for spell-checking\n\n\n\nMore information on each of these folders and their contents can be found in the RStudio Workbench Administration Guide."
  },
  {
    "href": "remote_desktop/remote_desktop.html",
    "title": "Overview",
    "section": "",
    "text": "Remote Desktop\nWhen using RStudio Desktop Pro, you can launch and connect to sessions via a remote RStudio Workbench instance, allowing you to do your work on a more powerful computing system while providing the enhanced desktop look-and-feel.\n\nNote: RStudio Desktop Pro clients will be unable to connect to RStudio Workbench when it is configured to use Google Authentication due to restrictions from Google - see Google’s Notice for more information.\n\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n  var isInternal = new RegExp('/' + window.location.host + '/');\n  // Inspect non-navigation links and adorn them if external\n  var links = window.document.querySelectorAll('a:not(.nav-link):not(.toc-action)');\n  for (var i=0; i<links.length; i++) {\n    const link = links[i];\n    if (!isInternal.test(link.href)) {\n        // target, if specified\n        link.setAttribute(\"target\", \"_blank\");\n        // default icon\n        link.classList.add(\"external\");\n    }\n  }\n});"
  },
  {
    "href": "remote_desktop/session_servers.html#session-servers",
    "title": "Session Servers",
    "section": "Session Servers",
    "text": "UI Configuration\n\nAdding Session Servers\nSession servers can be defined by going to the session server settings dialog, which you can find underneath the connection status dropdown in the upper right corner of the IDE.\n\nClick on Session Server Settings and you’ll be presented with a dialog where you can add and remove session servers.\n\nUpon clicking on the Add button, you will be shown the following dialog to add a session server. Simply give the server the desired name and add the base URL of your RStudio Workbench instance.\n\nPath mappings allow you to map local system paths to remote server paths that will automatically be replaced when running Launcher Jobs on that particular session server. For example, if you map a shared drive on your local Windows machine at H: and this maps to /shared/code on your remote session server, you can add a path mapping from H:->/shared/code to ensure Launcher job paths including local paths are properly rewritten to remote paths.\n\n\nOptions\nOn the Session Server Settings dialog, there are two options: Start new sessions and Close remote sessions on exit.\nStart new sessions allows you to control where sessions are started when opening the IDE. If set to Ask you will be prompted to select where to start your session every time you open the IDE. If set to Locally, your session will be started locally, and you will have to use the Connection Status dropdown to connect to remote sessions. If set to On the server, your session will start on the default session server defined (if any).\nClose remote sessions on exit will control whether or not sessions are automatically quit when your desktop browser is closed. It can be set to Always, Never, or Ask. If set to Ask you will be prompted every time whether or not to close the session when exiting the desktop browser.\n\n\n\nConfiguration file\nIn addition to end-users configuring session servers via the UI, you may pre-configuration session server settings via a config file named session-servers.conf stored in a system location. This causes the session server settings to be read-only by users, and they cannot modify the settings in any way.\nOn Windows, the file is %programdata%\\RStudio\\session-servers.conf. On macOS and Linux it is /etc/rstudio/session-servers.conf.\nThis file is not created by RStudio, so you must create it and distribute it as appropriate in order for it to show up in users’ desktop settings. The file is a simple JSON file with the following elements:\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nservers (array of session server object)\nAn array of session servers\n\n\ndefaultSessionLocation (string)\nWhere to launch a session when the IDE is first opened. Corresponds to the UI setting Start new sessions. Can be one of “Ask”, “Locally”, or “Server”.\n\n\ncloseServerSessionsOnExit (string)\nControl whether or not to close remote server sessions when the desktop is closed. Corresponds to the UI setting Close remote sessions on exit. Can be one of “Ask”, “Always”, or “Never”.\n\n\n\nSession server objects have the following parameters:\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nname (string)\nThe name of the server\n\n\nurl (string)\nThe base URL of the server\n\n\nisDefault (boolean)\nWhether or not the session is the default for launching. There must only be one default in the servers array.\n\n\nallowPathMapping (boolean)\nWhether or not path mapping is allowed for this server. If defining path mappings, this should be true.\n\n\npathMappings (array of path mapping object)\nAn array of path mappings\n\n\n\nPath mapping objects have the following parameters:\n\n\n\nParameter\nDescription\n\n\n\n\nlocalPath (string)\nThe local path\n\n\nremotePath (string)\nThe remote path\n\n\n\nThe following is an example session-servers.conf:\n{\n   \"servers\":[\n    {\n       \"name\":\"RSW\",\n       \"url\":\"http://rstudio.mycorp.com:8887\",\n       \"isDefault\":false,\n       \"allowPathMapping\":false,\n       \"pathMappings\":[]\n    },\n    {\n       \"name\":\"Staging RSW\",\n       \"url\":\"http://staging-rstudio.mycorp.com:8887\",\n       \"isDefault\":true,\n       \"allowPathMapping\":true,\n       \"pathMappings\":[{\"localPath\":\"H:\\\\\", \"remotePath\":\"/shared/code\"}]\n    }],\n    \"defaultSessionLocation\":\"Ask\",\n    \"closeServerSessionsOnExit\":\"Never\"\n}"
  }
]